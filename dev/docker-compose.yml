services:
  db:
    image: postgres:16
    volumes:
      - postgres-data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U dose3d"]
      interval: 5s
      timeout: 5s
      retries: 5
    network_mode: host
    environment:
      - POSTGRES_DB=dose3d
      - POSTGRES_USER=dose3d
      - POSTGRES_PASSWORD=dose3d

  frontend:
    build:
      context: ..
      dockerfile: dev/Dockerfile.devcontainer.frontend
    volumes:
      - ../frontend:/app/frontend
      - ../jsroot-fork:/app/jsroot-fork
    command: bash -c "cd /app/jsroot-fork && \
      npm install && \
      cd /app/frontend && \
      npm install && \
      npm start" # Runs node dev server with hot reload. If you want to run server manually use `sleep infinity` instead of `npm start`, then you can connect to running container shell and run it manually
    network_mode: host
    depends_on:
      - backend

  backend:
    build:
      context: ..
      dockerfile: dev/Dockerfile.devcontainer.backend
    command:
      bash -c "cp -u backend/settings_local.py.sample backend/settings_local.py && \
      python manage.py migrate && \
      python manage.py createsuperuser --noinput || true && \
      python manage.py runserver 0.0.0.0:8000" # Runs dapthne dev server with hot reload. If you want to run server manually use `sleep infinity` instead of `python manage.py ...`, then you can connect to running container shell and run it manually
    network_mode: host
    volumes:
      - backend-data:/app/var
      - ../backend:/app/backend
    environment:
      - DJANGO_SUPERUSER_USERNAME=admin
      - DJANGO_SUPERUSER_PASSWORD=admin
      - DJANGO_SUPERUSER_EMAIL=admin@example.com
    depends_on:
      db:
        condition: service_healthy

volumes:
  postgres-data:
  backend-data:
